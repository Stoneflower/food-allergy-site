import { supabase } from '../lib/supabase';

// Supabase„ÇØ„Ç®„É™„Çí„ÉÜ„Çπ„Éà„Åô„ÇãÈñ¢Êï∞
export const testSupabaseQuery = async () => {
  try {
    console.log('üîß Supabase„ÇØ„Ç®„É™„ÉÜ„Çπ„ÉàÈñãÂßã...');

    // 1. Âü∫Êú¨ÁöÑ„Å™ÂïÜÂìÅÂèñÂæó„ÉÜ„Çπ„Éà
    console.log('üì¶ 1. Âü∫Êú¨ÁöÑ„Å™ÂïÜÂìÅÂèñÂæó„ÉÜ„Çπ„Éà');
    const { data: basicProducts, error: basicError } = await supabase
      .from('products')
      .select('id, name, category')
      .limit(3);

    if (basicError) {
      console.error('‚ùå Âü∫Êú¨ÂïÜÂìÅÂèñÂæó„Ç®„É©„Éº:', basicError);
      return;
    }

    console.log('‚úÖ Âü∫Êú¨ÂïÜÂìÅÂèñÂæóÊàêÂäü:', basicProducts);

    // 2. product_allergies„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    console.log('ü•ö 2. product_allergies„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç');
    const { data: allergyData, error: allergyError } = await supabase
      .from('product_allergies')
      .select('*')
      .limit(5);

    if (allergyError) {
      console.error('‚ùå product_allergiesÂèñÂæó„Ç®„É©„Éº:', allergyError);
      console.error('‚ùå „Ç®„É©„ÉºË©≥Á¥∞:', JSON.stringify(allergyError, null, 2));
    } else {
      console.log('‚úÖ product_allergiesÂèñÂæóÊàêÂäü:', allergyData);
      console.log(`üìä product_allergies„ÅÆÁ∑èÊï∞: ${allergyData?.length || 0}‰ª∂`);
    }

    // 3. ÁµêÂêà„ÇØ„Ç®„É™„ÅÆ„ÉÜ„Çπ„Éà
    console.log('üîó 3. ÁµêÂêà„ÇØ„Ç®„É™„ÅÆ„ÉÜ„Çπ„Éà');
    const { data: joinedData, error: joinedError } = await supabase
      .from('products')
      .select(`
        id,
        name,
        category,
        product_allergies(
          id,
          allergy_item_id,
          presence_type,
          allergy_items(
            name,
            icon
          )
        )
      `)
      .limit(3);

    if (joinedError) {
      console.error('‚ùå ÁµêÂêà„ÇØ„Ç®„É™„Ç®„É©„Éº:', joinedError);
      console.error('‚ùå „Ç®„É©„ÉºË©≥Á¥∞:', JSON.stringify(joinedError, null, 2));
    } else {
      console.log('‚úÖ ÁµêÂêà„ÇØ„Ç®„É™ÊàêÂäü:', joinedData);
      
      // ÂêÑÂïÜÂìÅ„ÅÆ„Ç¢„É¨„É´„ÇÆ„ÉºÊÉÖÂ†±„ÇíÁ¢∫Ë™ç
      joinedData?.forEach((product, index) => {
        console.log(`üì¶ ÂïÜÂìÅ${index + 1}: ${product.name}`);
        console.log(`   - „Ç¢„É¨„É´„ÇÆ„ÉºÊÉÖÂ†±: ${product.product_allergies?.length || 0}‰ª∂`);
        if (product.product_allergies?.length > 0) {
          product.product_allergies.forEach((allergy, allergyIndex) => {
            console.log(`     ${allergyIndex + 1}. ${allergy.allergy_items?.name} (${allergy.presence_type})`);
          });
        }
      });
    }

    // 4. allergy_items„ÉÜ„Éº„Éñ„É´„ÅÆÁ¢∫Ë™ç
    console.log('üè∑Ô∏è 4. allergy_items„ÉÜ„Éº„Éñ„É´„ÅÆÁ¢∫Ë™ç');
    const { data: allergyItems, error: allergyItemsError } = await supabase
      .from('allergy_items')
      .select('item_id, name, icon')
      .limit(5);

    if (allergyItemsError) {
      console.error('‚ùå allergy_itemsÂèñÂæó„Ç®„É©„Éº:', allergyItemsError);
    } else {
      console.log('‚úÖ allergy_itemsÂèñÂæóÊàêÂäü:', allergyItems);
      console.log(`üìä allergy_items„ÅÆÁ∑èÊï∞: ${allergyItems?.length || 0}‰ª∂`);
    }

    return {
      basicProducts,
      allergyData,
      joinedData,
      allergyItems
    };

  } catch (error) {
    console.error('‚ùå Supabase„ÇØ„Ç®„É™„ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
  }
};

// ÁèæÂú®„ÅÆsearchService„Å®Âêå„Åò„ÇØ„Ç®„É™„Çí„ÉÜ„Çπ„Éà„Åô„ÇãÈñ¢Êï∞
export const testSearchServiceQuery = async () => {
  try {
    console.log('üîß searchService„ÇØ„Ç®„É™„ÉÜ„Çπ„ÉàÈñãÂßã...');

    const { data, error } = await supabase
      .from('products')
      .select(`
        *,
        product_allergies(
          id,
          allergy_item_id,
          presence_type,
          amount_level,
          notes,
          allergy_items(
            id,
            name,
            name_en,
            category,
            icon
          )
        ),
        store_locations(
          id,
          branch_name,
          address,
          store_list_url
        )
      `)
      .limit(3);

    if (error) {
      console.error('‚ùå searchService„ÇØ„Ç®„É™„Ç®„É©„Éº:', error);
      console.error('‚ùå „Ç®„É©„ÉºË©≥Á¥∞:', JSON.stringify(error, null, 2));
    } else {
      console.log('‚úÖ searchService„ÇØ„Ç®„É™ÊàêÂäü:', data);
      
      // ÂêÑÂïÜÂìÅ„ÅÆË©≥Á¥∞„ÇíÁ¢∫Ë™ç
      data?.forEach((product, index) => {
        console.log(`üì¶ ÂïÜÂìÅ${index + 1}: ${product.name}`);
        console.log(`   - product_allergies: ${product.product_allergies?.length || 0}‰ª∂`);
        console.log(`   - store_locations: ${product.store_locations?.length || 0}‰ª∂`);
        
        if (product.product_allergies?.length > 0) {
          product.product_allergies.forEach((allergy, allergyIndex) => {
            console.log(`     ${allergyIndex + 1}. ${allergy.allergy_items?.name} (${allergy.presence_type})`);
          });
        }
      });
    }

    return { data, error };

  } catch (error) {
    console.error('‚ùå searchService„ÇØ„Ç®„É™„ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
  }
};
